/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "xparameters.h"
#include "xgpio.h"
#include "xil_printf.h"
#include "sleep.h"
#include "xuartps.h"
#include "xaxidma.h"
#include "dma_bd/dma_bd.h"
#include "xscugic.h"
#include "stdio.h"
#include "ad9226_sample.h"

/*
 *DMA redefines
 */
#define MAX_DMA_LEN		   0x800000      /* DMA max length in byte */
#define CH0_DMA_DEV_ID	   XPAR_AXIDMA_0_DEVICE_ID
#define CH0_DMA_BASE	   XPAR_AXIDMA_0_BASEADDR
#define CH0_S2MM_INTR_ID   XPAR_FABRIC_AXI_DMA_0_S2MM_INTROUT_INTR

/*
 *ADC defines
 */
#define AD9226_CH0_BASE    XPAR_AD9226_SAMPLE_0_S00_AXI_BASEADDR
#define AD9226_START       AD9226_SAMPLE_S00_AXI_SLV_REG0_OFFSET
#define AD9226_LENGTH      AD9226_SAMPLE_S00_AXI_SLV_REG1_OFFSET
#define ADC_CAPTURELEN     1920           /* ADC capture length */
#define ADC_COE            16             /* ADC coefficient */
#define ADC_BYTE           2              /* ADC data byte number */
#define ADC_BITS           12

/*
 *DMA BD defines
 */
#define BD_COUNT         4

//#define ADC_SAMPLE_NUM  (1024*512)
#define ADC_SAMPLE_NUM  1920

#define GPIO_RCLEAR_DEVICE_ID  XPAR_GPIO_0_DEVICE_ID
#define GPIO_VGCLK_DEVICE_ID  XPAR_GPIO_1_DEVICE_ID
#define GPIO_VGDATEN_DEVICE_ID  XPAR_GPIO_2_DEVICE_ID
#define GPIO_VGSDATA_DEVICE_ID  XPAR_GPIO_3_DEVICE_ID

#define UART_DEVICE_ID XPAR_PS7_UART_1_DEVICE_ID
#define INTC_DEVICE_ID XPAR_SCUGIC_SINGLE_DEVICE_ID
#define UART_INT_IRQ_ID XPAR_XUARTPS_1_INTR

XScuGic Intc;
XUartPs Uart_Ps;
XAxiDma AxiDmaCh0;
XGpio RCLEAR;
XGpio VGCLK;
XGpio VGDATEN;
XGpio VGSDATA;

/*
 * DMA s2mm receiver buffer
 */
short CH0DmaRxBuffer[MAX_DMA_LEN/sizeof(short)]  __attribute__ ((aligned(64)));
/*
 * BD buffer
 */
u32 Ch0BdChainBuffer[BD_ALIGNMENT*16] __attribute__ ((aligned(64)));

int ch0_s2mm_flag = -1;

u8 UART_TX_Buffer[4096];
u8 UART_RX_Buffer[4096];
u32 UART_Input_First = 0;
u8 End_Recieve=0;

typedef enum _RS232CMD
{

	RS232CMD_NOP=0X00,
	RS232CMD_C_CMD_IDN,
	RS232CMD_C_CMD_15SW,
	RS232CMD_C_CMD_SET_GAIN,
	RS232CMD_C_CMD_GET_ADC,

}RS232CMD;

u8 C_CMD_IDN[]="*IDN?";
u8 C_CMD_15SW[]="15SW ";
u8 C_CMD_SET_GAIN[]="GAIN ";
u8 C_CMD_GET_ADC[]="ADC?";

void ad9226_sample(u32 adc_addr, u32 adc_len);
void XAxiDma_Adc(u32 *BdChainBuffer, u32 adc_addr, u32 adc_len, u16 BdCount, XAxiDma *AxiDma);

u8 strcmp1(const u8 *souce,const u8 *destination)
{
		u8  val=1;
		while(*destination!='\0')
		{
			if(*souce++!=*destination++)
			{
				val=0;
				break;
			}
		}
		return(val);


}

u8 strtounchar(u8 str[], u8 *num)
{
	u8 offset=0;
	u8 iSize=0;
	//unsigned int *num=&inum;
	while((str[offset]<'0'||str[offset]>'9')&&str[offset]!='\0')
	{
		offset++;
	}
	*num=0;
	while(str[offset]>47&&str[offset]<58)
	{
		*num=*num*10;
		*num=*num+str[offset]-'0';
		iSize+=1;
		offset++;
		if(offset==0)
			break;
	}
	return(iSize);
}

int UartPsSend(XUartPs *InstancePtr, u8 *BufferPtr, u32 NumBytes)
{

	u32 SentCount = 0U;

	/* Setup the buffer parameters */
	InstancePtr->SendBuffer.RequestedBytes = NumBytes;
	InstancePtr->SendBuffer.RemainingBytes = NumBytes;
	InstancePtr->SendBuffer.NextBytePtr = BufferPtr;


	while (InstancePtr->SendBuffer.RemainingBytes > SentCount)
	{
		/* Fill the FIFO from the buffer */
		if (!XUartPs_IsTransmitFull(InstancePtr->Config.BaseAddress))
		{
			XUartPs_WriteReg(InstancePtr->Config.BaseAddress,
					XUARTPS_FIFO_OFFSET,
					((u32)InstancePtr->SendBuffer.
							NextBytePtr[SentCount]));

			/* Increment the send count. */
			SentCount++;
		}
	}

	/* Update the buffer to reflect the bytes that were sent from it */
	InstancePtr->SendBuffer.NextBytePtr += SentCount;
	InstancePtr->SendBuffer.RemainingBytes -= SentCount;


	return SentCount;
}

void AD8320_SET(u8 da)
{
    u8 i;
    u8 data_bit;
    u8 SDI_data;

    SDI_data = da;
    XGpio_DiscreteClear(&VGDATEN, 1, 1);
    XGpio_DiscreteClear(&VGCLK, 1, 1);
    for (i=0;i<8;i++)
    {
        data_bit = (SDI_data & 0x80)>>7;
        if(data_bit == 0)
        	XGpio_DiscreteClear(&VGSDATA, 1, 1);
        else
        	XGpio_DiscreteWrite(&VGSDATA, 1, 1);
        XGpio_DiscreteWrite(&VGCLK, 1, 1);
        SDI_data <<= 1;
        XGpio_DiscreteClear(&VGCLK, 1, 1);
    }
    XGpio_DiscreteClear(&VGDATEN, 1, 1);
    XGpio_DiscreteWrite(&VGDATEN, 1, 1);
    XGpio_DiscreteClear(&VGCLK, 1, 1);
}

u8 judge_command(const u8*souce)
{
	u8 val=0;
	if(strcmp1(souce,&C_CMD_IDN)==1)
		val=RS232CMD_C_CMD_IDN;

	else if(strcmp1(souce,&C_CMD_15SW)==1)
		val=RS232CMD_C_CMD_15SW;

	else if(strcmp1(souce,&C_CMD_SET_GAIN)==1)
		val=RS232CMD_C_CMD_SET_GAIN;

	else if(strcmp1(souce,&C_CMD_GET_ADC)==1)
		val=RS232CMD_C_CMD_GET_ADC;

	return(val);
}

void UART_process(u8 var)
{
	u8 setvalue;
	u8 temp_char=0;

	switch (var)
	{
		case RS232CMD_C_CMD_IDN:
			UartPsSend(&Uart_Ps, "lsp_test!!!",12);
			break;
		case RS232CMD_C_CMD_15SW:
			if(strcmp1(&UART_RX_Buffer[5],"ON")==1)
			{
				temp_char=1;
				XGpio_DiscreteWrite(&RCLEAR, 1, 1);
			}
			else if(strcmp1(&UART_RX_Buffer[5],"OFF")==1)
			{
				temp_char=0;
				XGpio_DiscreteClear(&RCLEAR, 1, 1);
			}
			break;
		case RS232CMD_C_CMD_SET_GAIN:
			strtounchar(&UART_RX_Buffer, &setvalue);
			AD8320_SET(setvalue);
			break;
		case RS232CMD_C_CMD_GET_ADC:
			XAxiDma_Adc(Ch0BdChainBuffer, AD9226_CH0_BASE, ADC_SAMPLE_NUM, BD_COUNT, &AxiDmaCh0) ;
			break;
		default:

			break;
	}
}

//´®¿Ú³õÊ¼»¯
int uart_init(XUartPs *uart_ps)
{
	int status;
	XUartPs_Config *uart_cfg;

	uart_cfg = XUartPs_LookupConfig(UART_DEVICE_ID);

	status = XUartPs_CfgInitialize(uart_ps, uart_cfg, uart_cfg->BaseAddress);

	status = XUartPs_SelfTest(uart_ps);

	XUartPs_SetOperMode(uart_ps, XUARTPS_OPER_MODE_NORMAL);

	XUartPs_SetBaudRate(uart_ps,115200);

	XUartPs_SetFifoThreshold(uart_ps, 1);

	return XST_SUCCESS;
}

/*
 *Initial DMA and connect interrupt to handler, open s2mm interrupt
 *
 *@param DeviceId    DMA device id
 *@param IntrID      DMA interrupt id
 *@param XAxiDma     DMA pointer
 *@param InstancePtr GIC pointer
 *
 *@note  none
 */
int XAxiDma_Initial(XAxiDma *XAxiDma)
{
	XAxiDma_Config *CfgPtr;
	int Status;
	/* Initialize the XAxiDma device. */
	CfgPtr = XAxiDma_LookupConfig(CH0_DMA_DEV_ID);

	Status = XAxiDma_CfgInitialize(XAxiDma, CfgPtr);

	/* Disable MM2S interrupt, Enable S2MM interrupt */
	XAxiDma_IntrEnable(XAxiDma, XAXIDMA_IRQ_IOC_MASK, XAXIDMA_DEVICE_TO_DMA);
	XAxiDma_IntrDisable(XAxiDma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DMA_TO_DEVICE);

	return XST_SUCCESS ;
}


void uart_intr_handler(void *call_back_ref)
{
	XUartPs *uart_instance_ptr = (XUartPs *) call_back_ref;
	u32 rec_data = 0;
	u32 isr_status;
	u8 *send_temp = "abcd";
	isr_status = XUartPs_ReadReg(uart_instance_ptr->Config.BaseAddress,XUARTPS_IMR_OFFSET);

	isr_status &= XUartPs_ReadReg(uart_instance_ptr->Config.BaseAddress,XUARTPS_ISR_OFFSET);

	if (isr_status & (u32)XUARTPS_IXR_RXOVR)
	{
		rec_data = XUartPs_RecvByte(XPAR_PS7_UART_1_BASEADDR);

		XUartPs_WriteReg(uart_instance_ptr->Config.BaseAddress,XUARTPS_ISR_OFFSET, XUARTPS_IXR_RXOVR) ;
	}
	if(rec_data !='\n')
	{
		UART_RX_Buffer[UART_Input_First] = rec_data;
		UART_Input_First++;
	}
	else
	{
		UART_RX_Buffer[UART_Input_First] = '\0';
//		UartPsSend(uart_instance_ptr, UART_Buffer,UART_Input_First);
//		UartPsSend(uart_instance_ptr, send_temp,sizeof(send_temp));
		UART_Input_First = 0;
		End_Recieve=1;
	}
//	XUartPs_SendByte(XPAR_PS7_UART_1_BASEADDR,rec_data);

}
/*
 *callback function
 *Check interrupt status and assert s2mm flag
 */
void Dma_Interrupt_Handler(void *CallBackRef)
{
	XAxiDma *XAxiDmaPtr = (XAxiDma *) CallBackRef;

	int s2mm_sr ;

	s2mm_sr = XAxiDma_IntrGetIrq(XAxiDmaPtr, XAXIDMA_DEVICE_TO_DMA) ;
	//xil_printf("Interrupt Value is 0x%x\r\n", s2mm_sr) ;

	if (s2mm_sr & XAXIDMA_IRQ_IOC_MASK)
	{
		/* Clear interrupt */
		XAxiDma_IntrAckIrq(XAxiDmaPtr, XAXIDMA_IRQ_IOC_MASK,XAXIDMA_DEVICE_TO_DMA) ;

		if (XAxiDmaPtr->RegBase == CH0_DMA_BASE)
		{
			ch0_s2mm_flag = 1;
		}

	}
}


int uart_intr_init(XScuGic *intc, XUartPs *uart_ps)
{
	int status;

	XScuGic_Config *intc_cfg;
	intc_cfg = XScuGic_LookupConfig(INTC_DEVICE_ID);

	status = XScuGic_CfgInitialize(intc, intc_cfg,intc_cfg->CpuBaseAddress);

	Xil_ExceptionInit();
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,(Xil_ExceptionHandler)XScuGic_InterruptHandler,(void *)intc);
	Xil_ExceptionEnable();

	XScuGic_Connect(intc, UART_INT_IRQ_ID,(Xil_ExceptionHandler) uart_intr_handler,(void *) uart_ps);

	XUartPs_SetInterruptMask(uart_ps, XUARTPS_IXR_RXOVR);

	XScuGic_Enable(intc, UART_INT_IRQ_ID);

	return XST_SUCCESS;
}

int XAxiDma_intr_init(XScuGic *intc, XAxiDma *AxiDmaCh0)
{
	int status;

	// Register GPIO interrupt handler
	status = XScuGic_Connect(intc,CH0_S2MM_INTR_ID,(Xil_InterruptHandler)Dma_Interrupt_Handler,(void *)AxiDmaCh0);

	XScuGic_SetPriorityTriggerType(intc,CH0_S2MM_INTR_ID,0,3);

	XScuGic_Enable(intc, CH0_S2MM_INTR_ID);
	return XST_SUCCESS;
}

void XAxiDma_Adc(u32 *BdChainBuffer, u32 adc_addr, u32 adc_len, u16 BdCount, XAxiDma *AxiDma)
{
	/* Clear BD Status */
	Bd_StatusClr(BdChainBuffer, BdCount) ;
	/* Start Channel 0 sample */
	ad9226_sample(adc_addr, adc_len)  ;
	/* start DMA translation from AD9226 channel 0 to DDR3 */
	Bd_Start(BdChainBuffer, BdCount, AxiDma, RXPATH) ;
}

/*
 *This is ADC sample function, use it and start sample adc data
 *
 *@param adc_addr ADC base address
 *@param adc_len is sample length in ADC data width
 */
void ad9226_sample(u32 adc_addr, u32 adc_len)
{
	/* provide length to AD9226 channel */
	AD9226_SAMPLE_mWriteReg(adc_addr, AD9226_LENGTH, adc_len)  ;
	/* start sample AD9226 channel */
	AD9226_SAMPLE_mWriteReg(adc_addr, AD9226_START, 1) ;
}

int main()
{
    u8 da = 255;

    uart_init(&Uart_Ps);
    uart_intr_init(&Intc, &Uart_Ps);
    XAxiDma_Initial(&AxiDmaCh0);
    XAxiDma_intr_init(&Intc, &AxiDmaCh0);

    XGpio_Initialize(&RCLEAR, GPIO_RCLEAR_DEVICE_ID);
    XGpio_Initialize(&VGCLK, GPIO_VGCLK_DEVICE_ID);
    XGpio_Initialize(&VGDATEN, GPIO_VGDATEN_DEVICE_ID);
    XGpio_Initialize(&VGSDATA, GPIO_VGSDATA_DEVICE_ID);

    XGpio_SetDataDirection(&RCLEAR, 1, 0);
    XGpio_SetDataDirection(&VGCLK, 1, 0);
    XGpio_SetDataDirection(&VGDATEN, 1, 0);
    XGpio_SetDataDirection(&VGSDATA, 1, 0);

    XGpio_DiscreteClear(&RCLEAR, 1, 1);

    CreateBdChain(Ch0BdChainBuffer, BD_COUNT, ADC_BYTE*ADC_SAMPLE_NUM, (u8 *)CH0DmaRxBuffer, RXPATH) ;

    while (1)
    {
    	if(End_Recieve==1)
    	{
    		End_Recieve=0;
    		UART_process(judge_command(&UART_RX_Buffer));
    	}
    	if(ch0_s2mm_flag >= 0)
    	{
    		ch0_s2mm_flag = -1;

    		UartPsSend(&Uart_Ps, (short *) CH0DmaRxBuffer,1920);
    		CH0DmaRxBuffer = CH0DmaRxBuffer + 1920;
    	}

    	usleep(100);
    }


    return 0;
}
